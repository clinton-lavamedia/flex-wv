'use client'
import { useState, useEffect } from "react";
import { Card, CardBody, Input, Button, Slider, Avatar } from "@nextui-org/react";
import { useRouter } from 'next/navigation'
import toast from "react-hot-toast";
/* import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library'; */
import { useSearchParams } from 'next/navigation'
import { Bars } from 'react-loader-spinner'

//import data from './google.json'
//https://docs.google.com/spreadsheets/d/1p8jyvPb1Pp4r-E-yTft1ZKqks5rXjfKVnvuKyHXobDM/edit#gid=0
//https://docs.google.com/spreadsheets/d/1MH5aI6_c9QBrIR2kvZZhyZplHKmF4cjU4B7yuaSEilI/edit#gid=0// Config variables
/* const SPREADSHEET_ID = '1p8jyvPb1Pp4r-E-yTft1ZKqks5rXjfKVnvuKyHXobDM';
const SHEET_ID = 0;
const GOOGLE_CLIENT_EMAIL = data.client_email;
const GOOGLE_SERVICE_PRIVATE_KEY = data.private_key.replace(/\\n/g, '\n');

const serviceAccountAuth = new JWT({
	// env var values here are copied from service account credentials generated by google
	// see "Authentication" section in docs for more info
	email: data.client_email,
	key: data.private_key.replace(/\\n/g, '\n'),
	scopes: [
		'https://www.googleapis.com/auth/drive',
		'https://www.googleapis.com/auth/drive.file',
		'https://www.googleapis.com/auth/spreadsheets',
	],
});
// GoogleSpreadsheet Initialize
const doc = new GoogleSpreadsheet(SPREADSHEET_ID, serviceAccountAuth);
const appendSpreadsheet = async (row: any) => {
	try {

		// loads document properties and worksheets
		await doc.loadInfo();

		const sheet = doc.sheetsById[SHEET_ID];
		await sheet.addRow(row);
	} catch (e) {
		console.error('Error: ', e);
	}
}; */
let flex = [
	{
		id: 1,
		name: 'Fashionista'
	}, {
		id: 2,
		name: 'Fitness Guru'
	}, {
		id: 3,
		name: 'College crush'
	}, {
		id: 4,
		name: 'Beer bro'
	}, {
		id: 5,
		name: 'Social glue'
	}, {
		id: 6,
		name: 'Drama queen'
	},
	{
		id: 7,
		name: 'Skincare enthusiast'
	},
	{
		id: 8,
		name: 'Dance drunk'
	},
	{
		id: 9,
		name: '3am buddy'
	},
	{
		id: 10,
		name: 'Herbalist'
	},]
export default function Flex() {
	const router = useRouter()
	const [phone, setPhone] = useState("");
	const searchParams = useSearchParams()
	var param = searchParams.get('name')
	const [name, setName] = useState(param ? param : 'Tara');
	const [isLoading, setLoading] = useState(false);

	const [selected, setSelected] = useState(0);
	/* useEffect(() => {
		if (window) {
			// set props data to session storage or local storage  
			const phone = window.sessionStorage.getItem('phone')
			//const name = window.sessionStorage.getItem('name')
			if (phone == null) {
				router.push('/')
				toast.error("something wrong try to again send otp");
				return;
			}
			setPhone(phone)
			//setName(name ? name : '')
			console.log(phone, name)
		}
	}, []); */
	const handleSubmit = () => {

		/* const newRow = {
			name: name,
			phone: phone,
			firebaseid: '',
			vote: flex[selected-1].name
		}; */
		setLoading(true)
		console.log(process.env.NEXT_PUBLIC_USLACK)
		fetch('https://' + process.env.NEXT_PUBLIC_USLACK!, {
			method: 'POST',
			headers: {
				'Content-type': 'application/x-www-form-urlencoded',
			},
			body: JSON.stringify({ text: (phone ? phone : 'Someone') + ' flexed on ' + name + ' : ' + flex[selected - 1].name }),
		})
			.then((data) => {
				console.log(data);
				//sessionStorage.setItem('token', data)
				setLoading(false)

				router.push('/mobile?name=' + name)
			})
			.catch((error) => {
				setLoading(false)

				console.error(error);


			});
		//appendSpreadsheet(newRow);
		//router.push('/success')
	}
	function getImage(name: any){
		switch (name.toLowerCase()){
			case "vaishnavi":
				return "https://heyo-public-assets.s3.ap-south-1.amazonaws.com/"+process.env.NEXT_PUBLIC_VASINAVI;
			case "riya":
				return "https://heyo-public-assets.s3.ap-south-1.amazonaws.com/"+process.env.NEXT_PUBLIC_RIYA;
				default:
					return "https://i.pravatar.cc/150?u=a04258114e29026708c"
		}
	}
	var camalize = function camalize(str: string) {
		return str.charAt(0).toUpperCase() + str.slice(1);
	}
	return (
		<div>
			<div className="flex flex-col items-center align-middle justify-center pt-10 ">

				<Avatar src={getImage(name)}
					radius="full"
					size="lg"
					className="w-40 h-40 text-large align-middle" />
				<div className="text-6xl   pt-2">
					{name ? camalize(name) : 'Tara'}
				</div>
				<div className=" text-mini  pt-2 pb-2">
					What describes {name ? camalize(name) : 'Tara'} best?
				</div>
				<Bars
					height="80"
					width="80"
					color="#4fa94d"
					ariaLabel="bars-loading"
					wrapperStyle={{}}
					wrapperClass=""
					visible={isLoading}
				/>
			</div>

			<div className="flex flex-col mt-3 gap-1 px-unit-sm ">
				{flex.map((flex) =>
					<Card id={flex.id.toString()}
						isPressable
						onPress={() => setSelected(flex.id)}
						isBlurred

						className={flex.id == selected ? "bg-lime-400  rounded-[10px]  shadow-[2px_2px_0px_#000] box-border border-[1px] border-solid border-black mb-2"
							:
							"bg-white  rounded-[10px] shadow-[2px_2px_0px_#000] box-border border-[1px] border-solid border-black mb-2"}
					//className=" bg-white font-medium rounded-[10px] text-6xl shadow-[2px_2px_0px_#000] box-border border-[1px] border-solid border-black mb-2"
					>
						<CardBody>
							<p className="text-6xl mr-5 ml-5 ">{flex.name}</p>
						</CardBody>
					</Card>

				)}
			</div>
			<div className="flex items-center justify-center ">
				<Button color="success"

					isDisabled={selected ? false : true}
					onClick={handleSubmit}
					className={selected ? "fixed z-90 bottom-10  bg-lime-400 flex w-40 h-14 font-medium rounded-[10px] text-6xl shadow-[2px_2px_0px_#000] box-border border-[1px] border-solid border-black"
						:
						" fixed z-90 bottom-10 bg-gray-400 flex h-14 font-medium w-40 rounded-[10px] text-6xl shadow-[2px_2px_0px_#000] box-border border-[1px] border-solid border-black"
					}
				// variant="shadow"
				>
					Done

				</Button>
			</div>

		</div>
	);
}
